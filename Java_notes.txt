Java installer path:
--------------------

https://download.oracle.com/java/17/latest/jdk-17_windows-x64_bin.msi


Eclipse Ide installer path:
---------------------------
https://eclipseide.org/


Git Download
------------
 in google type Git Scm





Day - 8
--------
Introduction to Java
Setting up java with Environment -JDK& JRE
Eclipse IDE Setup
Variables, Data Types, Keywords
Operators

Copy the java path: C:\Program Files\Java\jdk-17\bin
Open : Edit the system environment variables


JDK - Java Development Kit
	Software Development environment which is used to develop java application.

javac --> java compiler --> generated bytecode (class file) --> JVM executes.

JVM - Java Virtual Machine ---> Load code, Verifies code,Executes the code, provides the Runtime environment.
JRE - Java Runtime Environment --> Set of software tools which are used for developing java application. 
					Implementation of JVM.

Java --> Programming Language. 
	-> Platform independent
	-> easy & simple
	-> Lots of Libraries
	-> Object Oriented
	-> Write once and Run anywhere

Language Fundamentals:

1. Identifiers
2. Reserved Keywords
3. Data types
4. Main method
5. Command line
6. Java coding standards.

1. Identifiers
	==> Never starts with number
	==> Case sensitive
	==> Cannot start with # symbol (includes all sepcial character)
	==> a-z A-Z 0-9
	==> Keywords cannot be used as Identifier.
eg: a = 10;
	A=10;

2. Keyword: perdefined meaning
	We have 53 reseverd keywords
for data type: 8 data types -> byte,short,int,long,float,double,char,boolean
cotrol flow: if, else, switch,case,default,for,do,while,break,continue,return.
modifiers: public,private,protected,static,final,abstract. 
void

3. Data types:
	eg: int a=10;

a ---> variable
int ---> datatype
10 ---> value of a. 

	char a ='b';   --> a single letter is considered as character. It is represented by single quote.
 
Primitive data type
	1. Numeric - byte,short,int,long
	2. Floating - float and double. 
		char  -- 'a' ,boolean -- true or false 
	shot a =32768 

	float a= 32.45F;

int a=10;

declaring the variable:     int a;
intializing the varuiable : a=10; 


Non-primitive data type:
	1. String 
		1) Storing the string as a Literal
			String name = "pawan"; ---> sequence of characters, repersented by double quotes.
			String name1= "pawan";
		2) We can store it as an Object
			String name = new String("pawan");
			String name1 = new String("pawan");
	2. Arrays
	3. Enum
	4. Interface

3. Main method : is where the program execution starts. 


Java coding standards: 

Command line ---> repersented by // (single line)
		for block of line --> /* ..... */ 




Day - 9
-------
Control statements,Looping
Arrays, Strings Class,Access modifiers

Operators: Special symbols, that is used to perform specific operation on one or more operands.

a + b

a,b --> operands
+ --> operator 

Arithmetic  --> +,-,*,/,%
Assignment  --> =, =+, =-, =%, =*
	c = a + b;
	c = 10;
	c =+ 5;
	c ---> 5;

Comparison  --> < , > , <=, >= , == ,!= (not equalto)   --> a =10; b=20; ---> a != b  -- ans: true 
Logical  --> && , || , !
Unary  --> perfix,postfix --> ++a, --a, a++, a--   ===> a =10; --> a++;  
Ternary --> ? : 

Control statements
------------------

if statement
if else
nested if
switch case



Project --> package --> class 

Class syntax:
	access-specifier class(keyword) class_name {
	
	body of the class

}

e.g: public class ControlStatements {

}


if statement: 

Syntax:
	
	if(condition) {
		block of code
}

...
...

if else:

	if(condition){

		block of code

} else {
	else block of code
}


Nested if: if inside a if

If the inner condition satisfies then only outer if will be executed.

	if(condition) {
		if(condition){
			if(condition){
				block of code

		}
	}
}

if-else-if

Syntax:
	if(condition)
		statement
	else if(condtion)
		statement
	else if(condition)
		statement

	.
	.
	.
	else 
		statement


Switch case:

	switch(expression){
		case 1:
			//block of code
		break;
		
		case 2:
			//block of code
		break;
		
		default:
			//block of code
}


Looping:

	As long as the condition return true the loop will run, once the condition becomes false, it will
come out of the loop.

	while (condition){
		block of code
	}


For loop

	Syntax:
		for(intialization; condition; increment/decrement){
		
		}


*
* *
*   *
*     *
* * * * *

Step 1: No.of rows == No.of times the outer loop should run
Step 2: No.of columns == No.of times the inner loop should run 
Step 3: what needs to be printed -- > *
2 dimensional array 

do while:
	
	do{
		//statement
	} while(condition);


Array: 


package day9;

import java.util.Scanner;

public class ArraySample {

	public static void main(String[] args) {
		
		// Data structure that allows you to store multiple values of same data type.
		// Collection of similar data type. 
		
		// 1. 
		
		Scanner sc = new Scanner(System.in);
		
		int[] numbers;   // declartion
		
		numbers =  new int[2]; // initalize the size of array
			
		// 2. 
		
		int[] nums = {10,20,30};
		
		//System.out.println(numbers.length);
//		for(int i =0; i<numbers.length; i++) {
//			
//			System.out.println("Enter a vale");
//			numbers[i] =  sc.nextInt();
//			
//		}
		 
		System.out.println(nums.length);
		
		for(int num : nums) {
			System.out.println(num);
		}
		
	
		String name = "Guvi";   // ivuG
		
		// charAt(0); 
		System.out.println(name.length());
		for(int i=0;i<name.length();i++) {
			
			System.out.print(name.charAt(i));
		}
		
		//num % 2 ==0   -- even number
		
		madam
		madam
	}

}



Day 10:

OOPS Concepts
Class & Object Creation 
Constructor,Methods,
Use of Static and Instance

Class and Object: 
	
	Building  --> Object -- real world entity. 
	Blue print --> Class 

Knows something 
Does something 

Eg: Class  -- behaviour of an object 

2 things: 1. Variable 2.Methods

Object creation:
----------------
Calc obj = new Calc();

Calc --> class name
obj --> reference/object name
new --> allocate the memory
Calc() --> default constructor that tells us how much memory is required. 

Types of Variables:
------------------
Variable --> container that stores the value. Using variable we can perform certain actions.

Instance variable  --> Inside class and outside the method.
Local Variable  --> present inside the method.
Static variable --> value will not be changed.

Methods:
--------
	-> Block of code which executed when it's called.
	-> You can pass data to methods, which is known as parameter.
	-> Method has a return type --> if it's not returning anything - void
	-> Why ? ---> To reuse the code: define the code once, make it use many times.
	
How to call a method of a class:

1. We can call a method using class name --> when the method is declared as static
2. We can call a method by creating object --> when the method is not a static method. 

Ex:
---

1. Create a class -- Calc

2. 3 methods --> add(), sub(), mul()
	add() -- void
	sub() -- return type
	mul() -- static

3. 3 variable --> 2 variable to perform the operation and 1 to store the result. 

O/p:
----
The addition value is: 
The subraction value is:
The multiplication value is: 




Constructor:
	-> special method
	-> member method 
	-> constructor name will be same as the class name.
	-> it will not return anything.  
	-> To create an Object you need a constructor.
	-> Whenever we create an Object we need to create a constructor so that memory allocation can happen.
		java will provide that to us, that is called as default constructor.
	-> When the Object is created constructor will be called.
	-> Used to allocate memory to an object.

2 types:
	1. Default constructor
	2. Parameterized constructor.



Day-11:
-------
Features of OOP'S: - Object Oriented Programming
Inheritance
Abstraction
Polymorphism-Overloading and Overriding
Encapsulation-Getter and Setter Methods

Inheritance: 
	2 dev (A and B) -- each are working on req 
		B --> 	when you need to reuse the code of A class to B class we can extend the A to B.
Accquiring all the methods and properties of another class. 

Parent class  -- A
Child class -- B

Super class -- A
Sub class -- B

Base class  -- A
Derived class -- B

Types of Inheritance:

1. Single inhertance -- One parent and one child ---  A ---> B
2. Multi-level inheritance -- A --> B --> C

3. Multiple inheritance   ---> Interface

A      B
 
   C   --- extends  A , B

4. Hierarchy Inheritance  -- One parent and two child

	A
    
    B      C   ---  B extends A    ,   C extends A

5. Hybrid   -- Combination of Multiple and Hierarchy inheritance

		
Polymorphism:
	Ability of an object to take multiple form.
2 types:
	Method overloading (Compile-time polymorphism)  -- Same method name, different parameter list and different data type.
	Method overriding (Run time polymorphism)  -- Same method name and same parameter list. 

Method Overloading  VS Method Overriding

1. No inheritance       1. Atleat 2 class --> 1 parent and 1 child
2. Method definition    2. Method definition should be same.
   should not be same



Abstraction: 
	Taking the important stuff and hiding the others.

2 ways:
1.Abstract class  (0 to 100%)
2.Interface (100%)


public void add(int n1,int n2){  --- implemented method. 
	
	int result = n1+n2;
	//implementation 
}

public abstract void add();   --> unimplemented method.

1) Abstract method is only declared not defined.
2. Abstarct class can have abstract method.
3. Object cannot be created fro abstract class. Conrette class object can be created.



4 methods:

public abstract class Initial{

	public void call(){
	
	}

	public void text(){
	
	}

	public void camera(){

	}

	public abstract void location();

}

public class SecondClass extends Initial{  // Concrette class

	public void location(){

	}

}

Encapsulation:
	Binding the data with methods. Only way to access the variable is through methods.
	If you want to access the variable only through methods without using object then you can use
	getters and setters method. 

Why?
	For safe data
	We can keep data in private. 

this keyword:
	To mention that the variable is the instance variable and not local variable when we are assigning some 
	variable name.






Day 13: Exception
-----------------
Introd
uction to Exceptions
What is Exception and Exception Handling?
Types of Exceptions
Use of Try-Catch-finally blocks
Throw and throws keyword
User defined eception. 

Exception - Event that disrupts the normal flow of program.

Throwable   - super class
1. Exception  - we can handle  
	1. Checked Exception  - Java itself will know it might throw an exception. Also it will
							allow the user to handle.
			1)IOException
			2)SQLException
			3)FileNotFoundException
			
	2. Unchecked Exception - It will not make compulsory for user to handle it. If they can, they can
							handle it or they can leave it unchecked. 
	
			1)RunTimeException
				1)ArithmeticException
				2)ArrayIndexOutOfBound Exception
2. Error - we cannot handle. 

Statement  - Line of code
1) Normal
2) Critical 

Try-catch:
1) Divide by 0 without try-catch
2) Divide by 0 with try-catch
3) Having a statement in try blocks
4) Print Custom message.
5) Use parent class in catch block.

Multi-catch block.
------------------
For one try block we can have multiple catch blocks.
If you have to perform different tasks at the occurence of different execptions, use java multi-catch 
block.

At a time only one exception can occur and only one catch block is executed. 
All catch block must be ordered from more specific to general. 

Throws:
-------

It is used to suppress the exception. It will not handle, it will suppress (stop).

a()-> calls b() -> calls c() - In c() we are having an exception. 

1. Either c() can handle exception using try-catch block.
2. Or it can throw the exception to b()
3. b() throws the exception to a().
4. a() has to handle. 

throw - Forcefully throw the error. 

k = i/j; 

j > 1

throw new ArithmeticException

Throw Vs 															throws
-----------------
1) Throw keyword is used to throw an exception    Throws keyword is used in method signature to declare
explicitly in the code insite the method.         an exception. which might be thrown by the method while 
												  execution of code.

2) Syntax : 											

	throw followed by the instance of             The throws keyword is followed by class name of Exceptions
	Exception to be thrown							to be thrown.
	
	throw new Exception								void method_named throws Exception
	

Finally:

Used to execute important code such as closing the connection etc.,
Even if you don't handle the exception, JVM executes the finally block before terminating the block.

Finally block:

	Used to execute important code such as closing excel/Db connection etc.,
	Even if you don't handle the exception, before terminating the program, JVM executed finally block.
	Only one finally block is allowed. 


Why?

its used to put the cleanup code such as closing a file , closing a connection.
The important statements to be printed can be placed in finally block. 

Only one finally block we can have. 

User-defined Exception:
-----------------------

We need to write the constructor that takes the String as error message and it is used to call
parent class constructor.











		
 

































